-----------------------------------------------------
Pseudocode méthode de la dichotomie :

Entrée : fun, a, b, tol, iterMax, trueValue
Sortie: approximation de la racine, nombre d'itérations, erreur relative
Step 1 : i ← 1
Step 2 : TANT QUE i < iterMax ET |b - a| > tol FAIRE
Step 3 :    i ← i + 1
Step 4 :    c ← (a + b)/2
Step 5 :    fc ← fun(c)
Step 6 :    SI fc = 0
Step 7 :        BREAK
Step 8 :    FIN SI
Step 9 :    SI fun(a) * fc < 0
Step 10 :       b ← c
Step 11 :   SINON
Step 12 :       a ← c
Step 13 :   FIN SI
Step 14 : FIN TANT QUE
Step 15 : xfinal ← c
Step 16 : err ← |xfinal - trueValue|

-----------------------------------------------------
Pseudocode méthode de la trichotomie :

Entrée : fun, a, b, tol, iterMax, trueValue
Sortie: approximation de la racine, nombre d'itérations, erreur relative
Step 1 : i ← 1
Step 2 : TANT QUE i < iterMax ET |b - a| > tol FAIRE
Step 3 :    i ← i + 1
Step 4 :    c1 ← (a + b)/3
Step 5 :    c2 ← 2*(a + b)/3
Step 6 :    fc1 ← fun(c1)
Step 7 :    fc2 ← fun(c2)
Step 8 :    SI fc1 = 0
Step 9 :        xfinal ← c1
Step 10 :       err = 0
Step 11 :       EXIT
Step 12 :   SINON SI fc2 = 0
Step 13 :       xfinal ← c2
Step 14 :       err = 0
Step 15 :       EXIT
Step 16 :   FIN SI
Step 17 :   SI fun(a) * fc1 < 0
Step 18 :       b ← c1
Step 19 :   SINON SI fun(a) * fc2 < 0
Step 20 :       a ← c1
Step 21 :       b ← c2
Step 22 :   SINON
Step 23 :       a ← c2
Step 24 :   FIN SI
Step 25 : FIN TANT QUE
Step 26 : xfinal ← (a + b)/2
Step 27 : err ← |xfinal - trueValue|


-----------------------------------------------------
Pseudocode méthode du point fixe :

Entrée : fun, p0, tol, iterMax, trueValue
Sortie: approximation de la racine, nombre d'itérations, erreur relative
Step 1 : i ← 1
Step 2 : x ← p0
Step 3 : TANT QUE i < iterMax FAIRE
Step 4 :    newX ← fun(x)
Step 5 :    SI |newX - x| < tol
Step 6 :        BREAK
Step 7 :    FIN SI
Step 8 :    i ← i + 1
Step 9 :    x ← newX
Step 10 : FIN TANT QUE
Step 11 : xfinal ← x
Step 12 : err ← |xfinal - trueValue|

-----------------------------------------------------
Pseudocode méthode de Newton :

Entrée : fun, deriv, p0, tol, iterMax, trueValue
Sortie: approximation de la racine, nombre d'itérations, erreur relative
Step 1 : i ← 1
Step 2 : x ← p0
Step 3 : TANT QUE i < iterMax ET |fun(x)| > tol FAIRE
Step 4 :    i ← i + 1
Step 5 :    x = x - fun(x)/deriv(x)
Step 6 : FIN TANT QUE
Step 7 : xfinal ← x
Step 8 : err ← |xfinal - trueValue|

-----------------------------------------------------
Pseudocode méthode de la sécante :

Entrée : fun, a, b, tol, iterMax, trueValue
Sortie: approximation de la racine, nombre d'itérations, erreur relative
Step 1 : i ← 1
Step 2 : x0 ← a
Step 3 : x1 ← b
Step 4 : TANT QUE i < iterMax ET |x1 - x0| > tol FAIRE
Step 5 :    i ← i + 1
Step 6 :    x2 ← x1 - fun(x1)*(x1 - x0)/(fun(x1) - fun(x0))
Step 7 :    x0 ← x1
Step 8 :    x1 ← x2
Step 9 : FIN TANT QUE
Step 10 : xfinal ← x1
Step 11 : err ← |xfinal - trueValue|

-----------------------------------------------------
Pseudocode méthode de la fausse position :

Entrée : fun, a, b, tol, iterMax, trueValue
Sortie: approximation de la racine, nombre d'itérations, erreur relative
Step 1 : i ← 1
Step 2 : x0 ← a
Step 3 : x1 ← b
Step 4 : TANT QUE i < iterMax
Step 5 :    i ← i + 1
Step 6 :    (x0*fun(x1) - x1*fun(x0))/(fun(x1) - fun(x0))
Step 7 :    SI |fun(x2)| < tol
Step 8 :        BREAK
Step 9 :    FIN SI
Step 10 :   SI fun(x0) * fun(x2) < 0
Step 11 :       x1 ← x2
Step 12 :   SINON
Step 13 :       x0 ← x2
Step 14 :   FIN SI
Step 15 : FIN TANT QUE
Step 16 : xfinal ← x2
Step 17 : err ← |xfinal - trueValue|